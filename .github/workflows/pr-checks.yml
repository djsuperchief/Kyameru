name: kyameru-pr

on:
  pull_request:
    branches: [main, release]

#GITHUB_WORKSPACE

jobs:
  dotnet-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
            dotnet-version: 8.0.x
      - name: Install dependencies
        run: dotnet restore KyameruFull.sln
      - name: Build
        run: dotnet build KyameruFull.sln --configuration Release --no-restore
      - name: Test
        #run: dotnet test tests/UnitTests/Kyameru.Tests/Kyameru.Tests.csproj --no-restore --verbosity normal /p:ExcludeSources=tests/* /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:CoverletOutput=TestCoverage/
        run: dotnet test KyameruFull.sln --no-restore --verbosity normal /p:ExcludeSources=tests/* /p:CollectCoverage=true /p:CoverletOutputFormat="lcov%2cjson" /p:CoverletOutput=${GITHUB_WORKSPACE}/build/TestCoverage/ /p:MergeWith="${GITHUB_WORKSPACE}/build/TestCoverage/coverage.json"
      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./build/TestCoverage/coverage.info 

  nuget-security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
            dotnet-version: 8.0.x
      
      - name: Restore Solution
        run: dotnet restore KyameruFull.sln
      - name: Scan for security risks
        shell: pwsh
        run: |
          $results = dotnet list ${{ github.workspace}} }}/KyameruFull.sln package --vulnerable --include-transitive
          if($results -like '*High*' || $results -like '*Critical*') {
            Write-Host 'Packages vulnerable'
            dotnet list ${{ github.workspace}} }}/KyameruFull.sln package --vulnerable --include-transitive
            exit 1
          }

  # analyze:
  #   name: Analyze
  #   runs-on: ubuntu-latest

  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       language: [ 'csharp' ]
  #       # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
  #       # Learn more:
  #       # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   # Initializes the CodeQL tools for scanning.
  #   - name: Initialize CodeQL
  #     uses: github/codeql-action/init@v2
  #     with:
  #       languages: ${{ matrix.language }}
  #       # If you wish to specify custom queries, you can do so here or in a config file.
  #       # By default, queries listed here will override any specified in a config file.
  #       # Prefix the list here with "+" to use these queries and those in the config file.
  #       # queries: ./path/to/local/query, your-org/your-repo/queries@main

  #   # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
  #   # If this step fails, then you should remove it and run the build manually (see below)
  #   - name: Autobuild
  #     uses: github/codeql-action/autobuild@v2

  #   # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
  #   # üìö https://git.io/JvXDl

  #   # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following three lines
  #   #    and modify them (or add more) to build your code if your project
  #   #    uses a compiled language

  #   #- run: |
  #   #   make bootstrap
  #   #   make release

  #   - name: Perform CodeQL Analysis
  #     uses: github/codeql-action/analyze@v2
